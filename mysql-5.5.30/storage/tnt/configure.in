##set the package name and version
AC_INIT([tnt], [0.01])

##check for existence of src/ha_tnt.cpp
##check if source dir is valild
AC_CONFIG_SRCDIR([src/ha_tnt.cpp])

##define search path
AC_CONFIG_AUX_DIR(config)

## foreign to gnu standard
## we don't need README NEW files 
AM_INIT_AUTOMAKE([foreign])


##do we need config.h??
#AM_CONFIG_HEADER(config.h)


##define plugin target
##[plugin_tnt_static_target] = plugin_tnt_static_target, without macro expansion
AC_SUBST([plugin_tnt_static_target], "libtnt.a")
AC_SUBST([plugin_tnt_shared_target], "ha_tnt.la")

##define build and compile tools
AC_PROG_CC
AC_PROG_CXX
AC_PROG_LIBTOOL
LIBTOOL="$LIBTOOL --preserve-dup-deps"
AC_SUBST(LIBTOOL)dnl


# standalone
dnl ---------------------------------------------------------------------------
dnl Macro: MYSQL_SRC
dnl ---------------------------------------------------------------------------
AC_DEFUN([MYSQL_SRC_TEST], [
		AC_MSG_CHECKING(for mysql source code)
		AC_ARG_WITH(mysql,
			[[  --with-mysql[=mysql src directory]      
						Source requir to build engine.]],
			[
				if test -d "$withval/sql"; then
					MYSQL_SRC="$i/mysql_config"
				fi

				AC_DEFINE([MYSQL_SRC], [1], [Source directory for MySQL])
				MYSQL_INC="-I$withval/sql -I$withval/include -I$withval/regex -I$withval"
				AC_MSG_RESULT(["$withval"])
			],
			[
				AC_MSG_ERROR(["no mysql source provided"])
			])
		])

dnl ---------------------------------------------------------------------------
dnl Macro: MYSQL_SRC
dnl ---------------------------------------------------------------------------
MYSQL_SRC_TEST


# ----- AC_SUBST(MYSQL_INC)
## MYSQL_INC is generated by config/ac_mysql.m4
AC_SUBST(MYSQL_INC)

SYSTEM_TYPE="$host_vendor-$host_os"

# ----- Build type
MAX_C_OPTIMIZE="-O3"
MAX_CXX_OPTIMIZE="-O3"

# Build optimized or debug version ?
# First check for gcc and g++
if test "$ac_cv_prog_gcc" = "yes"
then
  DEBUG_CFLAGS="-g"
  DEBUG_OPTIMIZE_CC="-O"
  OPTIMIZE_CFLAGS="$MAX_C_OPTIMIZE"
  DEBUG_ONLY_CFLAGS="-g"
else
  DEBUG_CFLAGS="-g"
  DEBUG_OPTIMIZE_CC=""
  OPTIMIZE_CFLAGS="-O"
  DEBUG_ONLY_CFLAGS="-g"
fi
if test "$ac_cv_prog_cxx_g" = "yes"
then
  DEBUG_CXXFLAGS="-g"
  DEBUG_OPTIMIZE_CXX="-O"
  OPTIMIZE_CXXFLAGS="$MAX_CXX_OPTIMIZE"
  DEBUG_ONLY_CXXFLAGS="-g"
else
  DEBUG_CXXFLAGS="-g"
  DEBUG_OPTIMIZE_CXX=""
  OPTIMIZE_CXXFLAGS="-O"
  DEBUG_ONLY_CXXFLAGS="-g"
fi

if expr "$SYSTEM_TYPE" : ".*netware.*" > /dev/null; then
  DEBUG_CFLAGS="-g -DDEBUG -sym internal,codeview4"
  DEBUG_CXXFLAGS="-g -DDEBUG -sym internal,codeview4"
  DEBUG_OPTIMIZE_CC="-DDEBUG"
  DEBUG_OPTIMIZE_CXX="-DDEBUG"
  OPTIMIZE_CFLAGS="-O3 -DNDEBUG"
  OPTIMIZE_CXXFLAGS="-O3 -DNDEBUG"
  DEBUG_ONLY_CFLAGS="-g -DNDEBUG -sym internal,codeview4"
  DEBUG_ONLY_CXXFLAGS="-g -DNDEBUG -sym internal,codeview4"
fi

# ----- AC_ARG_WITH(debug
AC_ARG_WITH(debug,
    [  --with-debug            Add debug code
  --with-debug=full       Add debug code (adds memory checker, very slow)],
    [with_debug=$withval],
    [with_debug=no])
if test "$with_debug" = "yes"
then
  # Medium debug.
  AC_DEFINE([DBUG_ON], [1], [Medium debug - optimized debug version])
  CFLAGS="$DEBUG_CFLAGS $DEBUG_OPTIMIZE_CC"
  CXXFLAGS="$DEBUG_CXXFLAGS $DEBUG_OPTIMIZE_CXX"
elif test "$with_debug" = "full"
then
  # Full debug. Very slow in some cases
  AC_DEFINE([DBUG_ON], [1], [Full debug - very slow in some cases])
  CFLAGS="$DEBUG_CFLAGS -DSAFE_MUTEX -DSAFEMALLOC"
  CXXFLAGS="$DEBUG_CXXFLAGS -DSAFE_MUTEX -DSAFEMALLOC"
elif test "$with_debug" = "only"
then
  # Only debug the plug-in. Use with an optimised server
  AC_DEFINE([DBUG_OFF], [1], [Only debug - just compiles with -g])
  CFLAGS="$DEBUG_ONLY_CFLAGS"
  CXXFLAGS="$DEBUG_ONLY_CXXFLAGS"
else
  # Optimized version. No debug
  AC_DEFINE([DBUG_OFF], [1], [Optimized version -  no debug])
  CFLAGS="$OPTIMIZE_CFLAGS"
  CXXFLAGS="$OPTIMIZE_CXXFLAGS"
fi

## STL not compatible with this gcc options
#CXXFLAGS="$CXXFLAGS -fno-implicit-templates -fno-exceptions -fno-rtti"
#CXXFLAGS="$CXXFLAGS -fno-exceptions -fno-rtti"

case $SYSTEM_TYPE in
  *hpux10.20*)
    CFLAGS="$CFLAGS -DSIGNAL_WITH_VIO_CLOSE"
    CXXFLAGS="$CXXFLAGS -DSIGNAL_WITH_VIO_CLOSE"
    ;;
  *darwin*)
    CFLAGS="$CFLAGS -DSIGNAL_WITH_VIO_CLOSE"
    CXXFLAGS="$CXXFLAGS -DSIGNAL_WITH_VIO_CLOSE"
    ;;
esac

AC_C_CONST
AC_TYPE_SIZE_T
AC_CHECK_HEADERS(limits.h syslimits.h)
## file to generate
AC_OUTPUT(Makefile)
