/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef KV_H
#define KV_H

#include <TProcessor.h>
#include "KV_types.h"

namespace keyvalue {

class KVIf {
 public:
  virtual ~KVIf() {}
  virtual void get(std::vector<std::string> & _return, const TableInfo& table, const Attrs& key, const std::vector<int16_t> & attrs, const int64_t version) = 0;
  virtual void multi_get(std::map<int16_t, std::vector<std::string> > & _return, const TableInfo& table, const std::vector<Attrs> & keys, const std::vector<int16_t> & attrs, const int64_t version) = 0;
  virtual int8_t put(const TableInfo& table, const Attrs& key, const Attrs& values, const int64_t version) = 0;
  virtual int8_t setrec(const TableInfo& table, const Attrs& key, const Attrs& values, const int64_t version) = 0;
  virtual int8_t replace(const TableInfo& table, const Attrs& key, const Attrs& values, const int64_t version) = 0;
  virtual int8_t remove(const TableInfo& table, const Attrs& key, const int64_t version) = 0;
  virtual int8_t update(const TableInfo& table, const Attrs& key, const std::vector<Cond> & conds, const std::vector<DriverUpdateMode> & updatemodes, const int64_t version) = 0;
  virtual int8_t put_or_update(const TableInfo& table, const Attrs& key, const Attrs& values, const std::vector<DriverUpdateMode> & updatemodes, const int64_t version) = 0;
  virtual void getTableDef(KVTableDef& _return, const TableInfo& table) = 0;
};

class KVNull : virtual public KVIf {
 public:
  virtual ~KVNull() {}
  void get(std::vector<std::string> & /* _return */, const TableInfo& /* table */, const Attrs& /* key */, const std::vector<int16_t> & /* attrs */, const int64_t /* version */) {
    return;
  }
  void multi_get(std::map<int16_t, std::vector<std::string> > & /* _return */, const TableInfo& /* table */, const std::vector<Attrs> & /* keys */, const std::vector<int16_t> & /* attrs */, const int64_t /* version */) {
    return;
  }
  int8_t put(const TableInfo& /* table */, const Attrs& /* key */, const Attrs& /* values */, const int64_t /* version */) {
    int8_t _return = 0;
    return _return;
  }
  int8_t setrec(const TableInfo& /* table */, const Attrs& /* key */, const Attrs& /* values */, const int64_t /* version */) {
    int8_t _return = 0;
    return _return;
  }
  int8_t replace(const TableInfo& /* table */, const Attrs& /* key */, const Attrs& /* values */, const int64_t /* version */) {
    int8_t _return = 0;
    return _return;
  }
  int8_t remove(const TableInfo& /* table */, const Attrs& /* key */, const int64_t /* version */) {
    int8_t _return = 0;
    return _return;
  }
  int8_t update(const TableInfo& /* table */, const Attrs& /* key */, const std::vector<Cond> & /* conds */, const std::vector<DriverUpdateMode> & /* updatemodes */, const int64_t /* version */) {
    int8_t _return = 0;
    return _return;
  }
  int8_t put_or_update(const TableInfo& /* table */, const Attrs& /* key */, const Attrs& /* values */, const std::vector<DriverUpdateMode> & /* updatemodes */, const int64_t /* version */) {
    int8_t _return = 0;
    return _return;
  }
  void getTableDef(KVTableDef& /* _return */, const TableInfo& /* table */) {
    return;
  }
};

typedef struct _KV_get_args__isset {
  _KV_get_args__isset() : table(false), key(false), attrs(false), version(false) {}
  bool table;
  bool key;
  bool attrs;
  bool version;
} _KV_get_args__isset;

class KV_get_args {
 public:

  KV_get_args() : version(0) {
  }

  virtual ~KV_get_args() throw() {}

  TableInfo table;
  Attrs key;
  std::vector<int16_t>  attrs;
  int64_t version;

  _KV_get_args__isset __isset;

  bool operator == (const KV_get_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(attrs == rhs.attrs))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const KV_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KV_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KV_get_pargs {
 public:


  virtual ~KV_get_pargs() throw() {}

  const TableInfo* table;
  const Attrs* key;
  const std::vector<int16_t> * attrs;
  const int64_t* version;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KV_get_result__isset {
  _KV_get_result__isset() : success(false), serverException(false) {}
  bool success;
  bool serverException;
} _KV_get_result__isset;

class KV_get_result {
 public:

  KV_get_result() {
  }

  virtual ~KV_get_result() throw() {}

  std::vector<std::string>  success;
  ServerException serverException;

  _KV_get_result__isset __isset;

  bool operator == (const KV_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(serverException == rhs.serverException))
      return false;
    return true;
  }
  bool operator != (const KV_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KV_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KV_get_presult__isset {
  _KV_get_presult__isset() : success(false), serverException(false) {}
  bool success;
  bool serverException;
} _KV_get_presult__isset;

class KV_get_presult {
 public:


  virtual ~KV_get_presult() throw() {}

  std::vector<std::string> * success;
  ServerException serverException;

  _KV_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KV_multi_get_args__isset {
  _KV_multi_get_args__isset() : table(false), keys(false), attrs(false), version(false) {}
  bool table;
  bool keys;
  bool attrs;
  bool version;
} _KV_multi_get_args__isset;

class KV_multi_get_args {
 public:

  KV_multi_get_args() : version(0) {
  }

  virtual ~KV_multi_get_args() throw() {}

  TableInfo table;
  std::vector<Attrs>  keys;
  std::vector<int16_t>  attrs;
  int64_t version;

  _KV_multi_get_args__isset __isset;

  bool operator == (const KV_multi_get_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(keys == rhs.keys))
      return false;
    if (!(attrs == rhs.attrs))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const KV_multi_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KV_multi_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KV_multi_get_pargs {
 public:


  virtual ~KV_multi_get_pargs() throw() {}

  const TableInfo* table;
  const std::vector<Attrs> * keys;
  const std::vector<int16_t> * attrs;
  const int64_t* version;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KV_multi_get_result__isset {
  _KV_multi_get_result__isset() : success(false), serverException(false) {}
  bool success;
  bool serverException;
} _KV_multi_get_result__isset;

class KV_multi_get_result {
 public:

  KV_multi_get_result() {
  }

  virtual ~KV_multi_get_result() throw() {}

  std::map<int16_t, std::vector<std::string> >  success;
  ServerException serverException;

  _KV_multi_get_result__isset __isset;

  bool operator == (const KV_multi_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(serverException == rhs.serverException))
      return false;
    return true;
  }
  bool operator != (const KV_multi_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KV_multi_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KV_multi_get_presult__isset {
  _KV_multi_get_presult__isset() : success(false), serverException(false) {}
  bool success;
  bool serverException;
} _KV_multi_get_presult__isset;

class KV_multi_get_presult {
 public:


  virtual ~KV_multi_get_presult() throw() {}

  std::map<int16_t, std::vector<std::string> > * success;
  ServerException serverException;

  _KV_multi_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KV_put_args__isset {
  _KV_put_args__isset() : table(false), key(false), values(false), version(false) {}
  bool table;
  bool key;
  bool values;
  bool version;
} _KV_put_args__isset;

class KV_put_args {
 public:

  KV_put_args() : version(0) {
  }

  virtual ~KV_put_args() throw() {}

  TableInfo table;
  Attrs key;
  Attrs values;
  int64_t version;

  _KV_put_args__isset __isset;

  bool operator == (const KV_put_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(values == rhs.values))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const KV_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KV_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KV_put_pargs {
 public:


  virtual ~KV_put_pargs() throw() {}

  const TableInfo* table;
  const Attrs* key;
  const Attrs* values;
  const int64_t* version;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KV_put_result__isset {
  _KV_put_result__isset() : success(false), serverException(false) {}
  bool success;
  bool serverException;
} _KV_put_result__isset;

class KV_put_result {
 public:

  KV_put_result() : success(0) {
  }

  virtual ~KV_put_result() throw() {}

  int8_t success;
  ServerException serverException;

  _KV_put_result__isset __isset;

  bool operator == (const KV_put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(serverException == rhs.serverException))
      return false;
    return true;
  }
  bool operator != (const KV_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KV_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KV_put_presult__isset {
  _KV_put_presult__isset() : success(false), serverException(false) {}
  bool success;
  bool serverException;
} _KV_put_presult__isset;

class KV_put_presult {
 public:


  virtual ~KV_put_presult() throw() {}

  int8_t* success;
  ServerException serverException;

  _KV_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KV_setrec_args__isset {
  _KV_setrec_args__isset() : table(false), key(false), values(false), version(false) {}
  bool table;
  bool key;
  bool values;
  bool version;
} _KV_setrec_args__isset;

class KV_setrec_args {
 public:

  KV_setrec_args() : version(0) {
  }

  virtual ~KV_setrec_args() throw() {}

  TableInfo table;
  Attrs key;
  Attrs values;
  int64_t version;

  _KV_setrec_args__isset __isset;

  bool operator == (const KV_setrec_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(values == rhs.values))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const KV_setrec_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KV_setrec_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KV_setrec_pargs {
 public:


  virtual ~KV_setrec_pargs() throw() {}

  const TableInfo* table;
  const Attrs* key;
  const Attrs* values;
  const int64_t* version;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KV_setrec_result__isset {
  _KV_setrec_result__isset() : success(false), serverException(false) {}
  bool success;
  bool serverException;
} _KV_setrec_result__isset;

class KV_setrec_result {
 public:

  KV_setrec_result() : success(0) {
  }

  virtual ~KV_setrec_result() throw() {}

  int8_t success;
  ServerException serverException;

  _KV_setrec_result__isset __isset;

  bool operator == (const KV_setrec_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(serverException == rhs.serverException))
      return false;
    return true;
  }
  bool operator != (const KV_setrec_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KV_setrec_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KV_setrec_presult__isset {
  _KV_setrec_presult__isset() : success(false), serverException(false) {}
  bool success;
  bool serverException;
} _KV_setrec_presult__isset;

class KV_setrec_presult {
 public:


  virtual ~KV_setrec_presult() throw() {}

  int8_t* success;
  ServerException serverException;

  _KV_setrec_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KV_replace_args__isset {
  _KV_replace_args__isset() : table(false), key(false), values(false), version(false) {}
  bool table;
  bool key;
  bool values;
  bool version;
} _KV_replace_args__isset;

class KV_replace_args {
 public:

  KV_replace_args() : version(0) {
  }

  virtual ~KV_replace_args() throw() {}

  TableInfo table;
  Attrs key;
  Attrs values;
  int64_t version;

  _KV_replace_args__isset __isset;

  bool operator == (const KV_replace_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(values == rhs.values))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const KV_replace_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KV_replace_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KV_replace_pargs {
 public:


  virtual ~KV_replace_pargs() throw() {}

  const TableInfo* table;
  const Attrs* key;
  const Attrs* values;
  const int64_t* version;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KV_replace_result__isset {
  _KV_replace_result__isset() : success(false), serverException(false) {}
  bool success;
  bool serverException;
} _KV_replace_result__isset;

class KV_replace_result {
 public:

  KV_replace_result() : success(0) {
  }

  virtual ~KV_replace_result() throw() {}

  int8_t success;
  ServerException serverException;

  _KV_replace_result__isset __isset;

  bool operator == (const KV_replace_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(serverException == rhs.serverException))
      return false;
    return true;
  }
  bool operator != (const KV_replace_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KV_replace_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KV_replace_presult__isset {
  _KV_replace_presult__isset() : success(false), serverException(false) {}
  bool success;
  bool serverException;
} _KV_replace_presult__isset;

class KV_replace_presult {
 public:


  virtual ~KV_replace_presult() throw() {}

  int8_t* success;
  ServerException serverException;

  _KV_replace_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KV_remove_args__isset {
  _KV_remove_args__isset() : table(false), key(false), version(false) {}
  bool table;
  bool key;
  bool version;
} _KV_remove_args__isset;

class KV_remove_args {
 public:

  KV_remove_args() : version(0) {
  }

  virtual ~KV_remove_args() throw() {}

  TableInfo table;
  Attrs key;
  int64_t version;

  _KV_remove_args__isset __isset;

  bool operator == (const KV_remove_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const KV_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KV_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KV_remove_pargs {
 public:


  virtual ~KV_remove_pargs() throw() {}

  const TableInfo* table;
  const Attrs* key;
  const int64_t* version;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KV_remove_result__isset {
  _KV_remove_result__isset() : success(false), serverException(false) {}
  bool success;
  bool serverException;
} _KV_remove_result__isset;

class KV_remove_result {
 public:

  KV_remove_result() : success(0) {
  }

  virtual ~KV_remove_result() throw() {}

  int8_t success;
  ServerException serverException;

  _KV_remove_result__isset __isset;

  bool operator == (const KV_remove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(serverException == rhs.serverException))
      return false;
    return true;
  }
  bool operator != (const KV_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KV_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KV_remove_presult__isset {
  _KV_remove_presult__isset() : success(false), serverException(false) {}
  bool success;
  bool serverException;
} _KV_remove_presult__isset;

class KV_remove_presult {
 public:


  virtual ~KV_remove_presult() throw() {}

  int8_t* success;
  ServerException serverException;

  _KV_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KV_update_args__isset {
  _KV_update_args__isset() : table(false), key(false), conds(false), updatemodes(false), version(false) {}
  bool table;
  bool key;
  bool conds;
  bool updatemodes;
  bool version;
} _KV_update_args__isset;

class KV_update_args {
 public:

  KV_update_args() : version(0) {
  }

  virtual ~KV_update_args() throw() {}

  TableInfo table;
  Attrs key;
  std::vector<Cond>  conds;
  std::vector<DriverUpdateMode>  updatemodes;
  int64_t version;

  _KV_update_args__isset __isset;

  bool operator == (const KV_update_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(conds == rhs.conds))
      return false;
    if (!(updatemodes == rhs.updatemodes))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const KV_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KV_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KV_update_pargs {
 public:


  virtual ~KV_update_pargs() throw() {}

  const TableInfo* table;
  const Attrs* key;
  const std::vector<Cond> * conds;
  const std::vector<DriverUpdateMode> * updatemodes;
  const int64_t* version;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KV_update_result__isset {
  _KV_update_result__isset() : success(false), serverException(false) {}
  bool success;
  bool serverException;
} _KV_update_result__isset;

class KV_update_result {
 public:

  KV_update_result() : success(0) {
  }

  virtual ~KV_update_result() throw() {}

  int8_t success;
  ServerException serverException;

  _KV_update_result__isset __isset;

  bool operator == (const KV_update_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(serverException == rhs.serverException))
      return false;
    return true;
  }
  bool operator != (const KV_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KV_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KV_update_presult__isset {
  _KV_update_presult__isset() : success(false), serverException(false) {}
  bool success;
  bool serverException;
} _KV_update_presult__isset;

class KV_update_presult {
 public:


  virtual ~KV_update_presult() throw() {}

  int8_t* success;
  ServerException serverException;

  _KV_update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KV_put_or_update_args__isset {
  _KV_put_or_update_args__isset() : table(false), key(false), values(false), updatemodes(false), version(false) {}
  bool table;
  bool key;
  bool values;
  bool updatemodes;
  bool version;
} _KV_put_or_update_args__isset;

class KV_put_or_update_args {
 public:

  KV_put_or_update_args() : version(0) {
  }

  virtual ~KV_put_or_update_args() throw() {}

  TableInfo table;
  Attrs key;
  Attrs values;
  std::vector<DriverUpdateMode>  updatemodes;
  int64_t version;

  _KV_put_or_update_args__isset __isset;

  bool operator == (const KV_put_or_update_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(values == rhs.values))
      return false;
    if (!(updatemodes == rhs.updatemodes))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const KV_put_or_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KV_put_or_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KV_put_or_update_pargs {
 public:


  virtual ~KV_put_or_update_pargs() throw() {}

  const TableInfo* table;
  const Attrs* key;
  const Attrs* values;
  const std::vector<DriverUpdateMode> * updatemodes;
  const int64_t* version;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KV_put_or_update_result__isset {
  _KV_put_or_update_result__isset() : success(false), serverException(false) {}
  bool success;
  bool serverException;
} _KV_put_or_update_result__isset;

class KV_put_or_update_result {
 public:

  KV_put_or_update_result() : success(0) {
  }

  virtual ~KV_put_or_update_result() throw() {}

  int8_t success;
  ServerException serverException;

  _KV_put_or_update_result__isset __isset;

  bool operator == (const KV_put_or_update_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(serverException == rhs.serverException))
      return false;
    return true;
  }
  bool operator != (const KV_put_or_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KV_put_or_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KV_put_or_update_presult__isset {
  _KV_put_or_update_presult__isset() : success(false), serverException(false) {}
  bool success;
  bool serverException;
} _KV_put_or_update_presult__isset;

class KV_put_or_update_presult {
 public:


  virtual ~KV_put_or_update_presult() throw() {}

  int8_t* success;
  ServerException serverException;

  _KV_put_or_update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KV_getTableDef_args__isset {
  _KV_getTableDef_args__isset() : table(false) {}
  bool table;
} _KV_getTableDef_args__isset;

class KV_getTableDef_args {
 public:

  KV_getTableDef_args() {
  }

  virtual ~KV_getTableDef_args() throw() {}

  TableInfo table;

  _KV_getTableDef_args__isset __isset;

  bool operator == (const KV_getTableDef_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    return true;
  }
  bool operator != (const KV_getTableDef_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KV_getTableDef_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KV_getTableDef_pargs {
 public:


  virtual ~KV_getTableDef_pargs() throw() {}

  const TableInfo* table;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KV_getTableDef_result__isset {
  _KV_getTableDef_result__isset() : success(false), serverException(false) {}
  bool success;
  bool serverException;
} _KV_getTableDef_result__isset;

class KV_getTableDef_result {
 public:

  KV_getTableDef_result() {
  }

  virtual ~KV_getTableDef_result() throw() {}

  KVTableDef success;
  ServerException serverException;

  _KV_getTableDef_result__isset __isset;

  bool operator == (const KV_getTableDef_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(serverException == rhs.serverException))
      return false;
    return true;
  }
  bool operator != (const KV_getTableDef_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KV_getTableDef_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KV_getTableDef_presult__isset {
  _KV_getTableDef_presult__isset() : success(false), serverException(false) {}
  bool success;
  bool serverException;
} _KV_getTableDef_presult__isset;

class KV_getTableDef_presult {
 public:


  virtual ~KV_getTableDef_presult() throw() {}

  KVTableDef* success;
  ServerException serverException;

  _KV_getTableDef_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class KVClient : virtual public KVIf {
 public:
  KVClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  KVClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(std::vector<std::string> & _return, const TableInfo& table, const Attrs& key, const std::vector<int16_t> & attrs, const int64_t version);
  void send_get(const TableInfo& table, const Attrs& key, const std::vector<int16_t> & attrs, const int64_t version);
  void recv_get(std::vector<std::string> & _return);
  void multi_get(std::map<int16_t, std::vector<std::string> > & _return, const TableInfo& table, const std::vector<Attrs> & keys, const std::vector<int16_t> & attrs, const int64_t version);
  void send_multi_get(const TableInfo& table, const std::vector<Attrs> & keys, const std::vector<int16_t> & attrs, const int64_t version);
  void recv_multi_get(std::map<int16_t, std::vector<std::string> > & _return);
  int8_t put(const TableInfo& table, const Attrs& key, const Attrs& values, const int64_t version);
  void send_put(const TableInfo& table, const Attrs& key, const Attrs& values, const int64_t version);
  int8_t recv_put();
  int8_t setrec(const TableInfo& table, const Attrs& key, const Attrs& values, const int64_t version);
  void send_setrec(const TableInfo& table, const Attrs& key, const Attrs& values, const int64_t version);
  int8_t recv_setrec();
  int8_t replace(const TableInfo& table, const Attrs& key, const Attrs& values, const int64_t version);
  void send_replace(const TableInfo& table, const Attrs& key, const Attrs& values, const int64_t version);
  int8_t recv_replace();
  int8_t remove(const TableInfo& table, const Attrs& key, const int64_t version);
  void send_remove(const TableInfo& table, const Attrs& key, const int64_t version);
  int8_t recv_remove();
  int8_t update(const TableInfo& table, const Attrs& key, const std::vector<Cond> & conds, const std::vector<DriverUpdateMode> & updatemodes, const int64_t version);
  void send_update(const TableInfo& table, const Attrs& key, const std::vector<Cond> & conds, const std::vector<DriverUpdateMode> & updatemodes, const int64_t version);
  int8_t recv_update();
  int8_t put_or_update(const TableInfo& table, const Attrs& key, const Attrs& values, const std::vector<DriverUpdateMode> & updatemodes, const int64_t version);
  void send_put_or_update(const TableInfo& table, const Attrs& key, const Attrs& values, const std::vector<DriverUpdateMode> & updatemodes, const int64_t version);
  int8_t recv_put_or_update();
  void getTableDef(KVTableDef& _return, const TableInfo& table);
  void send_getTableDef(const TableInfo& table);
  void recv_getTableDef(KVTableDef& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class KVProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<KVIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (KVProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_multi_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setrec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_replace(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put_or_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTableDef(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  KVProcessor(boost::shared_ptr<KVIf> iface) :
    iface_(iface) {
    processMap_["get"] = &KVProcessor::process_get;
    processMap_["multi_get"] = &KVProcessor::process_multi_get;
    processMap_["put"] = &KVProcessor::process_put;
    processMap_["setrec"] = &KVProcessor::process_setrec;
    processMap_["replace"] = &KVProcessor::process_replace;
    processMap_["remove"] = &KVProcessor::process_remove;
    processMap_["update"] = &KVProcessor::process_update;
    processMap_["put_or_update"] = &KVProcessor::process_put_or_update;
    processMap_["getTableDef"] = &KVProcessor::process_getTableDef;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~KVProcessor() {}
};

class KVMultiface : virtual public KVIf {
 public:
  KVMultiface(std::vector<boost::shared_ptr<KVIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~KVMultiface() {}
 protected:
  std::vector<boost::shared_ptr<KVIf> > ifaces_;
  KVMultiface() {}
  void add(boost::shared_ptr<KVIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get(std::vector<std::string> & _return, const TableInfo& table, const Attrs& key, const std::vector<int16_t> & attrs, const int64_t version) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get(_return, table, key, attrs, version);
        return;
      } else {
        ifaces_[i]->get(_return, table, key, attrs, version);
      }
    }
  }

  void multi_get(std::map<int16_t, std::vector<std::string> > & _return, const TableInfo& table, const std::vector<Attrs> & keys, const std::vector<int16_t> & attrs, const int64_t version) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->multi_get(_return, table, keys, attrs, version);
        return;
      } else {
        ifaces_[i]->multi_get(_return, table, keys, attrs, version);
      }
    }
  }

  int8_t put(const TableInfo& table, const Attrs& key, const Attrs& values, const int64_t version) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->put(table, key, values, version);
      } else {
        ifaces_[i]->put(table, key, values, version);
      }
    }
  }

  int8_t setrec(const TableInfo& table, const Attrs& key, const Attrs& values, const int64_t version) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->setrec(table, key, values, version);
      } else {
        ifaces_[i]->setrec(table, key, values, version);
      }
    }
  }

  int8_t replace(const TableInfo& table, const Attrs& key, const Attrs& values, const int64_t version) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->replace(table, key, values, version);
      } else {
        ifaces_[i]->replace(table, key, values, version);
      }
    }
  }

  int8_t remove(const TableInfo& table, const Attrs& key, const int64_t version) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->remove(table, key, version);
      } else {
        ifaces_[i]->remove(table, key, version);
      }
    }
  }

  int8_t update(const TableInfo& table, const Attrs& key, const std::vector<Cond> & conds, const std::vector<DriverUpdateMode> & updatemodes, const int64_t version) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->update(table, key, conds, updatemodes, version);
      } else {
        ifaces_[i]->update(table, key, conds, updatemodes, version);
      }
    }
  }

  int8_t put_or_update(const TableInfo& table, const Attrs& key, const Attrs& values, const std::vector<DriverUpdateMode> & updatemodes, const int64_t version) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->put_or_update(table, key, values, updatemodes, version);
      } else {
        ifaces_[i]->put_or_update(table, key, values, updatemodes, version);
      }
    }
  }

  void getTableDef(KVTableDef& _return, const TableInfo& table) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getTableDef(_return, table);
        return;
      } else {
        ifaces_[i]->getTableDef(_return, table);
      }
    }
  }

};

} // namespace

#endif
