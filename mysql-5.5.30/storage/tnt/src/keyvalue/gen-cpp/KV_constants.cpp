/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifdef NTSE_KEYVALUE_SERVER
#include "KV_constants.h"

namespace keyvalue {

const KVConstants g_KV_constants;

KVConstants::KVConstants() {
  KV_EM_GENERIC = "unknown error!";

  KV_EM_OUT_OF_MEM = "out of memory!";

  KV_EM_FILE_NOT_EXIST = "file not exist!";

  KV_EM_FILE_PERM_ERROR = "file permission denied!";

  KV_EM_DISK_FULL = "disk is full!";

  KV_EM_FILE_EXIST = "file exist!";

  KV_EM_FILE_IN_USE = "file  in use!";

  KV_EM_FILE_EOF = "offset exceed file size!";

  KV_EM_READ_FAIL = "read fail!";

  KV_EM_WRITE_FAIL = "write fail!";

  KV_EM_FILE_FAIL = "file operation fail!";

  KV_EM_ACCESS_OUT_OF_PAGE = "access out of page!";

  KV_EM_PAGE_DAMAGE = "page damage!";

  KV_EM_CTRLFILE_DAMAGE = "control file damage!";

  KV_EM_OVERFLOW = "overflow!";

  KV_EM_INDEX_BROKEN = "index broken!";

  KV_EM_INDEX_UNQIUE_VIOLATION = "index unqiue violation!";

  KV_EM_NOT_LOCKED = "try to modify unlocked resources!";

  KV_EM_TOO_MANY_ROWLOCK = "too many rowlock!";

  KV_EM_TOO_MANY_SESSION = "too many session!";

  KV_EM_NOT_SUPPORT = "not supported!";

  KV_EM_EXCEED_LIMIT = "exceed limit!";

  KV_EM_CORRUPTED_LOGFILE = "corrupted logfile!";

  KV_EM_MISSING_LOGFILE = "missing logfile!";

  KV_EM_DUP_TABLEID = "duplicated tableID!";

  KV_EM_INVALID_BACKUP = "invalid backup!";

  KV_EM_LOCK_TIMEOUT = "lock timeout!";

  KV_EM_LOCK_FAIL = "lock fail!";

  KV_EM_SYNTAX_ERROR = "syntax error!";

  KV_EM_ROW_TOO_LONG = "row too long!";

  KV_EM_NONEINDEX = "none index!";

  KV_EM_DUPINDEX = "duplicated index!";

  KV_EM_COLDEF_ERROR = "column definition error!";

  KV_EM_CANCELED = "operation canceled!";

  KV_EM_CORRUPTED = "data corrupted!";

  KV_EM_TABLEDEF_ERROR = "table definition file format error!";

  KV_EM_INVALID_COL_GRP = "illegal column group definition!";

  KV_EM_NO_DICTIONARY = "compress global dictionary not exist!";

  KV_EM_UNSUPPORTED_ENCODE = "unsupported encoding!";

  KV_EM_CONNCETION_REFUSED = "connection refused!";

  KV_EM_TBLDEF_NOT_MATCH = "table definition not match!";

  KV_EM_TBLDEF_ACCESS_FAIL = "table definition access fail!";

  KV_EM_TABLE_NOT_EXIST = "table not exist!";

  KV_EM_KEY_ERROR = "primary key error!";

  KV_EM_KET_NOT_MATCH = "key not match!";

  KV_EM_COL_NOT_EXIST = "column not exist!";

  KV_EM_UNSUPPORTED_OP = "unsupported operation type!";

  KV_EM_COLTYPE_NOT_MATCH = "column type not match!";

  KV_EM_TOO_FEW_COL = "too few column value!";

  KV_EM_TOO_MANY_COL = "too many column value!";

  KV_EM_KEY_EXIST = "key exist!";

  KV_EM_KEY_NOT_EXIST = "key not exist!";

  KV_EM_UNKNOWN_HOST = "unknown host!";

  KV_EM_TIMEOUT = "socket timeout!";

  KV_EM_UNSUPPORTED_DATATYPE = "unspported datatype!";

  KV_EM_ILLEGAL_PARAMETER = "illegal parameter!";

  KV_EM_COL_NOT_NULLABLE = "column not nullable!";

  KV_EM_DUP_COL = "duplicated column name!";

  KV_EM_CONFLICT_COLVALUE = "duplicated column value!";

  KV_EM_VALUE_OVERFLOW = "value exceeds  column definition size!";

  KV_EM_GENERAL_ERROR = "general error!";

  KV_EM_TABLE_IN_DROPPING = "table is dropping!";

  errmsgMap.insert(std::make_pair((ErrCode::type)0, "unknown error!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)1, "out of memory!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)2, "file not exist!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)3, "file permission denied!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)4, "disk is full!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)5, "file exist!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)6, "file  in use!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)7, "offset exceed file size!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)8, "read fail!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)9, "write fail!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)10, "file operation fail!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)11, "access out of page!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)12, "page damage!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)13, "control file damage!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)14, "overflow!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)15, "index broken!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)16, "index unqiue violation!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)17, "try to modify unlocked resources!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)18, "too many rowlock!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)19, "too many session!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)20, "not supported!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)21, "exceed limit!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)22, "corrupted logfile!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)23, "missing logfile!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)24, "duplicated tableID!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)25, "invalid backup!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)26, "lock timeout!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)27, "lock fail!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)28, "syntax error!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)29, "row too long!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)30, "none index!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)31, "duplicated index!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)32, "column definition error!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)33, "operation canceled!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)34, "data corrupted!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)35, "table definition file format error!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)36, "illegal column group definition!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)37, "compress global dictionary not exist!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)38, "unsupported encoding!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)39, "connection refused!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)40, "table definition not match!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)41, "table definition access fail!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)42, "table not exist!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)43, "primary key error!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)44, "key not match!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)45, "column not exist!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)46, "unsupported operation type!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)47, "column type not match!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)48, "too few column value!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)49, "too many column value!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)50, "key exist!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)51, "key not exist!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)52, "unknown host!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)53, "socket timeout!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)54, "unspported datatype!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)55, "illegal parameter!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)56, "column not nullable!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)58, "duplicated column name!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)59, "duplicated column value!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)60, "value exceeds  column definition size!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)61, "general error!"));
  errmsgMap.insert(std::make_pair((ErrCode::type)62, "table is dropping!"));

}

} // namespace
#endif
